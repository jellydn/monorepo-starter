# This file defines a Kubernetes Deployment for the API application
# A Deployment manages a set of identical pods, ensuring they maintain a desired state

apiVersion: apps/v1 # The API version for the Deployment resource type
kind: Deployment # The type of Kubernetes resource being defined
metadata: # Metadata about the Deployment
  name: api # The name of the Deployment, used to reference it
  namespace: monorepo-app # The Kubernetes namespace this Deployment belongs to
  labels: # Key-value pairs used to organize and select Kubernetes objects
    app: api # Label that identifies this Deployment as part of the API application
  annotations:
    # This annotation ensures the deployment waits for the migration job
    depends-on: "db-migration"
spec: # The specification for the Deployment
  replicas: 1 # Number of identical pod copies to maintain (only 1 in this case)
  selector: # Defines how the Deployment finds which Pods to manage
    matchLabels: # Pods with matching labels will be managed by this Deployment
      app: api # Selects Pods with the label "app: api"
  template: # The template for creating new Pods
    metadata: # Metadata for the Pods created from this template
      labels: # Labels applied to Pods created from this template
        app: api # Each Pod will have the label "app: api"
      annotations: # Additional metadata that can be used by tools and libraries
        timestamp: "${TIMESTAMP}" # Dynamic timestamp value, likely set during deployment
    spec: # The specification for the Pods
      containers: # List of containers in the Pod
        - name: api # Name of the container
          image: ${REGISTRY_URL}/api:latest # Container image to use (with variable)
          imagePullPolicy: Always # Always pull the image when creating a container
          ports: # List of ports to expose from the container
            - containerPort: 3001 # The port the API listens on inside the container
              name: http # A name for this port (can be referenced by services)
          resources: # Resource limits and requests for the container
            limits: # Maximum resources the container can use
              cpu: "500m" # Maximum of 0.5 CPU cores (500 milliCPU)
              memory: "512Mi" # Maximum of 512 megabytes of memory
            requests: # Resources guaranteed to the container
              cpu: "100m" # Request 0.1 CPU cores (100 milliCPU)
              memory: "128Mi" # Request 128 megabytes of memory
          env: # Environment variables to set in the container
            - name: NODE_ENV # Environment variable name
              value: "production" # Environment variable value
            - name: DATABASE_URL
              value: "postgresql://postgres:postgres@postgres:5432/monorepo"
            - name: BETTER_AUTH_SECRET
              value: "super-secret-key-for-development-only"
          livenessProbe: # Checks if the container is alive and running
            httpGet: # Performs an HTTP GET request to check health
              path: /api/health # The path to request for health check
              port: 3001 # The port to connect to
            initialDelaySeconds: 15 # Wait 15 seconds before first probe
            periodSeconds: 20 # Check every 20 seconds thereafter
          readinessProbe: # Checks if the container is ready to serve requests
            httpGet: # Performs an HTTP GET request to check readiness
              path: /api/health # The path to request for readiness check
              port: 3001 # The port to connect to
            initialDelaySeconds: 5 # Wait 5 seconds before first probe
            periodSeconds: 10 # Check every 10 seconds thereafter
