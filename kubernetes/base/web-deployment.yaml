# This file defines a Kubernetes Deployment for the web application
# A Deployment manages a set of identical pods, ensuring they maintain a desired state

apiVersion: apps/v1 # The API version for the Deployment resource type
kind: Deployment # The type of Kubernetes resource being defined
metadata: # Metadata about the Deployment
  name: web # The name of the Deployment, used to reference it
  labels: # Key-value pairs used to organize and select Kubernetes objects
    app: web # Label that identifies this Deployment as part of the web application
spec: # The specification for the Deployment
  replicas: 1 # Number of identical pod copies to maintain (only 1 in this case)
  selector: # Defines how the Deployment finds which Pods to manage
    matchLabels: # Pods with matching labels will be managed by this Deployment
      app: web # Selects Pods with the label "app: web"
  template: # The template for creating new Pods
    metadata: # Metadata for the Pods created from this template
      labels: # Labels applied to Pods created from this template
        app: web # Each Pod will have the label "app: web"
      annotations: # Additional metadata that can be used by tools and libraries
        timestamp: "${TIMESTAMP}" # Dynamic timestamp value, likely set during deployment
    spec: # The specification for the Pods
      containers: # List of containers in the Pod
        - name: web # Name of the container
          image: ${REGISTRY_URL}/web:latest # Container image to use (with variable)
          imagePullPolicy: Always # Always pull the image when creating a container
          ports: # List of ports to expose from the container
            - containerPort: 3000 # The port the application listens on inside the container
          resources: # Resource limits and requests for the container
            limits: # Maximum resources the container can use
              cpu: "0.5" # Maximum of 0.5 CPU cores
              memory: "512Mi" # Maximum of 512 megabytes of memory
            requests: # Resources guaranteed to the container
              cpu: "0.2" # Request 0.2 CPU cores
              memory: "256Mi" # Request 256 megabytes of memory
          env: # Environment variables to set in the container
            - name: NODE_ENV # Environment variable name
              value: "production" # Environment variable value
            - name: API_URL # Environment variable name
              value: "${API_URL}" # Value from a variable, likely set during deployment
          livenessProbe: # Checks if the container is alive and running
            httpGet: # Performs an HTTP GET request to check health
              path: / # The path to request
              port: 3000 # The port to connect to
            initialDelaySeconds: 30 # Wait 30 seconds before first probe
            periodSeconds: 10 # Check every 10 seconds thereafter
          readinessProbe: # Checks if the container is ready to serve requests
            httpGet: # Performs an HTTP GET request to check readiness
              path: / # The path to request
              port: 3000 # The port to connect to
            initialDelaySeconds: 5 # Wait 5 seconds before first probe
            periodSeconds: 5 # Check every 5 seconds thereafter
